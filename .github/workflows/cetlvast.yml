name: "CETLVaSt"

on:
  push: # Further filtering is done in the jobs.
  pull_request:
    branches:
      - main
      - "issue/*"
  release:
    types: [published]
  workflow_dispatch:

jobs:
  cache-warmup:
    if: >
      github.event_name == 'release' ||
      github.event_name == 'workflow_dispatch' ||
      contains(github.event.head_commit.message, '#verification') ||
      contains(github.event.head_commit.message, '#docs') ||
      contains(github.ref, '/main') ||
      contains(github.ref, '/issue/') ||
      (github.event_name == 'pull_request')
    runs-on: ubuntu-latest
    container: ghcr.io/opencyphal/toolshed:ts24.4.3
    steps:
      - uses: actions/checkout@v5
      - name: Cache ext modules
        id: cetlvast-ext
        uses: actions/cache@v4
        with:
          path: cetlvast/build_external
          key: build-external-${{ hashFiles('**/cetlvast/cmake/modules/ExternalDependencies*.cmake.in') }}-${{ hashFiles('**/cetlvast/cmake/modules/patches/*.patch') }}
      - name: simple-build-online
        working-directory: cetlvast
        if: steps.cetlvast-ext.outputs.cache-hit != 'true'
        run: cmake --workflow --preset manual-simple-workflow-online

  verification-amd64:
    if: >
      github.event_name == 'release' ||
      github.event_name == 'workflow_dispatch' ||
      contains(github.event.head_commit.message, '#verification') ||
      contains(github.ref, '/main') ||
      contains(github.ref, '/issue/') ||
      (github.event_name == 'pull_request')
    runs-on: ubuntu-latest
    container: ghcr.io/opencyphal/toolshed:ts24.4.3
    needs:
      - cache-warmup
    strategy:
      matrix:
        toolchain: ["gcc-native-32", "clang-native"]
        standard: ["cpp-14", "cpp-17", "cpp-20", "cpp-23"]
    steps:
      - uses: actions/checkout@v5
      - name: Cache ext modules
        uses: actions/cache@v4
        with:
          path: cetlvast/build_external
          key: build-external-${{ hashFiles('**/cetlvast/cmake/modules/ExternalDependencies*.cmake.in') }}-${{ hashFiles('**/cetlvast/cmake/modules/patches/*.patch') }}
          fail-on-cache-miss: true
      - name: run tests
        working-directory: cetlvast
        env:
          GTEST_COLOR: yes
        run: >
          cmake --workflow --preset workflow-${{ matrix.toolchain }}-${{ matrix.standard }}-offline
      - name: upload-artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.toolchain }}-${{ matrix.standard }}-amd64
          path: |
            cetlvast/build/compile_commands.json
            cetlvast/build/*/**/coverage.xml
            cetlvast/build/*/**/*-sonarqube.xml
            cetlvast/build/*/**/gcovr_html/*.*
          if-no-files-found: error

  verification-arm64:
    if: >
      github.event_name == 'release' ||
      github.event_name == 'workflow_dispatch' ||
      contains(github.event.head_commit.message, '#verification') ||
      contains(github.ref, '/main') ||
      contains(github.ref, '/issue/') ||
      (github.event_name == 'pull_request')
    runs-on: ubuntu-24.04-arm
    container: ghcr.io/opencyphal/toolshed:ts24.4.3
    needs:
      - cache-warmup
    strategy:
      matrix:
        toolchain: ["gcc-native", "clang-native"]
        standard: ["cpp-14", "cpp-17", "cpp-20"]
    steps:
      - uses: actions/checkout@v5
      - name: Cache ext modules
        uses: actions/cache@v4
        with:
          path: cetlvast/build_external
          key: build-external-${{ hashFiles('**/cetlvast/cmake/modules/ExternalDependencies*.cmake.in') }}-${{ hashFiles('**/cetlvast/cmake/modules/patches/*.patch') }}
          fail-on-cache-miss: true
      - name: run tests
        working-directory: cetlvast
        env:
          GTEST_COLOR: yes
        run: >
          cmake --workflow --preset workflow-${{ matrix.toolchain }}-${{ matrix.standard }}-offline
      - name: upload-artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.toolchain }}-${{ matrix.standard }}-arm64
          path: |
            cetlvast/build/compile_commands.json
            cetlvast/build/*/**/coverage.xml
            cetlvast/build/*/**/*-sonarqube.xml
            cetlvast/build/*/**/gcovr_html/*.*
          if-no-files-found: error

  docs:
    if: >
      github.event_name == 'release' ||
      github.event_name == 'workflow_dispatch' ||
      contains(github.event.head_commit.message, '#docs') ||
      contains(github.ref, '/main') ||
      contains(github.ref, '/issue/') ||
      (github.event_name == 'pull_request')
    runs-on: ubuntu-latest
    container: ghcr.io/opencyphal/toolshed:ts24.4.3
    needs:
      - cache-warmup
    steps:
      - uses: actions/checkout@v5
      - name: Cache ext modules
        uses: actions/cache@v4
        with:
          path: cetlvast/build_external
          key: build-external-${{ hashFiles('**/cetlvast/cmake/modules/ExternalDependencies*.cmake.in') }}-${{ hashFiles('**/cetlvast/cmake/modules/patches/*.patch') }}
          fail-on-cache-miss: true
      - name: doc-gen-configure
        working-directory: cetlvast
        run: cmake --preset configure-gcc-native-cpp-14-offline
      - name: doc-gen-build
        working-directory: cetlvast/build
        run: ninja docs
      - name: Setup Pages
        if: ${{ github.event_name != 'pull_request' }}
        uses: actions/configure-pages@v5
      - name: Upload docs
        if: ${{ github.event_name != 'pull_request' }}
        uses: actions/upload-pages-artifact@v3
        with:
          path: "cetlvast/build/suites/docs/html/"

  sonarqube:
    if: >
      (github.event_name == 'release' && !github.event.release.prerelease) ||
      github.event_name == 'workflow_dispatch' ||
      contains(github.event.head_commit.message, '#sonar') ||
      contains(github.ref, '/main') ||
      contains(github.ref, '/issue/') ||
      (github.event_name == 'pull_request')
    needs:
      - cache-warmup
    runs-on: ubuntu-latest
    container: ghcr.io/opencyphal/toolshed:ts24.4.3
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis by sonarqube.
      - name: Cache ext modules
        uses: actions/cache@v4
        with:
          path: cetlvast/build_external
          key: build-external-${{ hashFiles('**/cetlvast/cmake/modules/ExternalDependencies*.cmake.in') }}-${{ hashFiles('**/cetlvast/cmake/modules/patches/*.patch') }}
          fail-on-cache-miss: true
      - name: Check for SONAR_TOKEN
        if: ${{ env.SONAR_TOKEN == '' && github.event_name == 'pull_request' }}
        run: echo "::notice file=cetlvast.yml,line=188,col=8,endColumn=80,title=No-Sonar::SONAR_TOKEN is not available for pull requests from external repositories."
      - name: Check for SONAR_TOKEN
        if: ${{ env.SONAR_TOKEN == '' && github.event_name != 'pull_request' }}
        run: echo "::error file=cetlvast.yml,line=191,col=8,endColumn=80,title=SONAR_TOKEN-missing::SONAR_TOKEN was empty or not found."
      - name: Run build for sonar-scanner
        if: ${{ env.SONAR_TOKEN != '' }}
        working-directory: cetlvast
        run: cmake --workflow --preset manual-coverage-gcc-native-cpp-14-offline
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5.3.0
        if: ${{ env.SONAR_TOKEN != '' }}
        with:
          args: >
            -Dsonar.organization=opencyphal
            -Dsonar.projectKey=OpenCyphal_CETL
            -Dsonar.projectName=CETLVaSt
            -Dsonar.verbose=true
            -Dsonar.cfamily.compile-commands=cetlvast/build/compile_commands.json
            -Dsonar.cfamily.cobertura.reportPaths=cetlvast/build/suites/unittest/coverage.xml
            -Dsonar.testExecutionReportPaths=cetlvast/build/suites/unittest/unittest-sonarqube.xml
            -Dsonar.sources="include,cetlvast/suites/unittest/sonar.cpp"
            -Dsonar.tests="cetlvast/suites/unittest"
            -Dsonar.test.inclusions="**/test_*.cpp"
            -Dsonar.cfamily.ignoreHeaderComments=false
            -Dsonar.coverage.exclusions="cetlvast/**/*,**/sonar.cpp"
            -Dsonar.cpd.exclusions="cetlvast/**/*,**/sonar.cpp"
            -Dsonar.cfamily.reportingCppStandardOverride=c++14

  deploy-docs:
    if: >
      (github.event_name == 'release' && !github.event.release.prerelease) ||
      github.event_name == 'workflow_dispatch'
    needs:
      - sonarqube
      - docs
    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      contents: read
      pages: write # to deploy to Pages
      id-token: write # to verify the deployment originates from an appropriate source

    # Deploy to the github-pages environment
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    # Specify runner + deployment step
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
